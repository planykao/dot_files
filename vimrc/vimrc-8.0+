" -------------------------------------------------------------------
" Editor
" -------------------------------------------------------------------
set background=dark
set cursorline
set t_Co=256
set guifont=Noto\ Mono\ for\ Powerline\ 11
set colorcolumn=121

syntax on
"highlight ModeMsg ctermfg=green
"set tags=./tags,tags
set tabstop=4
set expandtab
set shiftwidth=4
set autoindent
set smartindent
set fileformat=unix
set cindent
set makeprg=make\ all
set hlsearch
set showmode
set backspace=2
set number
set switchbuf+=usetab,newtab
autocmd FileType make setlocal noexpandtab
"autocmd BufWritePre * %s/\s\+$//e
" Truecolor
if has("termguicolors")
    " fix bug for vim
    set t_8f=[38;2;%lu;%lu;%lum
    set t_8b=[48;2;%lu;%lu;%lum
    " enable true color
    set termguicolors
endif

" -------------------------------------------------------------------
" vim-plug
" -------------------------------------------------------------------
" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')
" Make sure you use single quotes
" Plug 'Valloric/YouCompleteMe', { 'do': './install.py' }
Plug 'majutsushi/tagbar'
Plug 'aghareza/vim-gitgrep'
" Plug 'scrooloose/nerdtree'
" Plug 'ctrlpvim/ctrlp.vim'
Plug 'vim-airline/vim-airline'
Plug 'edkolev/tmuxline.vim'
Plug 'ntpeters/vim-better-whitespace'
Plug 'morhetz/gruvbox'
Plug 'justinmk/vim-syntax-extra'
" Plug 'tomasr/molokai'
Plug 'mhinz/vim-signify'
Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }
" Plug 'w0rp/ale'
Plug 'skywind3000/vim-preview'
Plug 'ludovicchabant/vim-gutentags'
Plug 'skywind3000/gutentags_plus'
" Initialize plugin system
call plug#end()

" -------------------------------------------------------------------
" vim-better-whitespace
" -------------------------------------------------------------------
let b:better_whitespace_enabled = 1
let b:strip_whitespace_on_save = 1

" -------------------------------------------------------------------
" ctrlp
" -------------------------------------------------------------------
"set runtimepath^=~/.vim/bundle/ctrlp.vim
"let g:ctrlp_map = '<c-p>'
"let g:ctrlp_cmd = 'CtrlP'
"let g:ctrlp_regexp = 1

" -------------------------------------------------------------------
" leaderF
" -------------------------------------------------------------------
let g:Lf_ShortcutF = '<c-p>'
let g:Lf_StlColorscheme = 'powerline'
let g:Lf_CommandMap = {'<C-J>': ['<DOWN>'], '<C-K>': ['<UP>']}

" -------------------------------------------------------------------
" tagbar
" -------------------------------------------------------------------
nmap <F8> :TagbarToggle<CR>
let g:tagbar_left=1

" -------------------------------------------------------------------
" nerdtree
" -------------------------------------------------------------------
" let g:NERDTreeWinPos = "right"

" -------------------------------------------------------------------
" keymap
" -------------------------------------------------------------------
" map <F2> :ToggleStripWhitespaceOnSave<CR>
map <F2> :StripWhitespace<CR>
map <F3> <ESC> :GitGrep <C-R><C-W><CR>
" map <F4> :NERDTreeToggle<CR>
" map <F4> <ESC>:Leaderf<CR>
map <F6> :vimgrep /<C-r><C-w>/ %<CR>:ccl<CR>:cwin<CR><C-W>J:nohls<CR>
map <C-]> g<C-]>
map <C-LeftMouse> g<C-]>
noremap <F9> :res -2<CR>
noremap <F10> :res +2<CR>

" -------------------------------------------------------------------
" cscope
" -------------------------------------------------------------------
"if filereadable("cscope.out")
"    cs add cscope.out
"" else add the database pointed to by environment variable
"elseif $CSCOPE_DB != ""
"    cs add $CSCOPE_DB
"endif
"nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>:bd<CR>:cwindow<CR>
"nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
"nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>:bd<CR>:cwindow<CR>
"nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>:bd<CR>:cwindow<CR>
"nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>:bd<CR>:cwindow<CR>
"nmap <C-\>f :cs find f <C-R>=expand("<cword>")<CR><CR>:bd<CR>:cwindow<CR>
"nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>:bd<CR>:cwindow<CR>
"nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>:bd<CR>:cwindow<CR>

" -------------------------------------------------------------------
" gutentags_plus
" GscopeFind d is not working
" -------------------------------------------------------------------
let g:gutentags_plus_switch = 1
noremap <C-\>s :GscopeFind s <C-R><C-W><cr>
noremap <C-\>g :GscopeFind g <C-R><C-W><cr>
noremap <C-\>c :GscopeFind c <C-R><C-W><cr>
noremap <C-\>t :GscopeFind t <C-R><C-W><cr>
noremap <C-\>e :GscopeFind e <C-R><C-W><cr>
noremap <C-\>f :GscopeFind f <C-R>=expand("<cfile>")<cr><cr>
noremap <C-\>i :GscopeFind i <C-R>=expand("<cfile>")<cr><cr>
noremap <C-\>d :GscopeFind d <C-R><C-W><cr>
noremap <C-\>a :GscopeFind a <C-R><C-W><cr>

" -------------------------------------------------------------------
" vim-gutentags
" -------------------------------------------------------------------
let g:gutentags_modules = []
let g:gutentags_project_root = ['.jupiter']
" generate datebases in my cache directory, prevent gtags files polluting my
let g:gutentags_cache_dir = expand('~/.cache/tags')

if executable('ctags')
	let g:gutentags_modules += ['ctags']
endif
if executable('gtags-cscope') && executable('gtags')
	let g:gutentags_modules += ['gtags_cscope']
endif
" debugging
let g:gutentags_define_advanced_commands = 1
":GutentagsToggleTrace

" -------------------------------------------------------------------
"set cscopetag
"set cscopeprg=gtags-cscope
"set cscopequickfix=c-,d-,e-,g-,i-,s-,t-

" -------------------------------------------------------------------
" airline
" -------------------------------------------------------------------
" set status line
set laststatus=2
" enable powerline-fonts
let g:airline_theme='gruvbox'
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1

" -------------------------------------------------------------------
" colorscheme
" -------------------------------------------------------------------
let g:gruvbox_contrast_dark='hard'
"let g:gruvbox_contrast_light='hard'
colorscheme gruvbox

" -------------------------------------------------------------------
" YouCompleteMe
" -------------------------------------------------------------------
"let g:ycm_add_preview_to_completeopt = 0
"let g:ycm_show_diagnostics_ui = 0
"let g:ycm_min_num_identifier_candidate_chars = 2
"let g:ycm_collect_identifiers_from_comments_and_strings = 1
"let g:ycm_complete_in_strings=1
"set completeopt=menu,menuone,noinsert
"let g:ycm_semantic_triggers =  {
"            \ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
"            \ 'cs,lua,javascript': ['re!\w{2}'],
"            \ }

" -------------------------------------------------------------------
" ale
" -------------------------------------------------------------------
"let g:ale_linters_explicit = 1
"let g:ale_completion_enabled = 1
"let g:ale_completion_delay = 500
"let g:ale_echo_delay = 20
"let g:ale_lint_delay = 500
"let g:ale_echo_msg_format = '[%linter%] %code: %%s'
"let g:ale_lint_on_text_changed = 'normal'
"let g:ale_lint_on_insert_leave = 1
"let g:airline#extensions#ale#enabled = 1
"let g:ale_linters = {
"    \   'c': ['gcc', 'cppcheck'],
"    \}
"let g:ale_c_gcc_options = '-Wall -O2 -std=c99'
"let g:ale_c_cppcheck_options = ''
"let g:ale_sign_error = "!!"

" -------------------------------------------------------------------
" vim-preview
" -------------------------------------------------------------------
autocmd FileType qf nnoremap <silent><buffer> p :PreviewQuickfix<cr>
autocmd FileType qf nnoremap <silent><buffer> P :PreviewClose<cr>

" vim-signify
let g:signify_vcs_list = [ 'git', 'svn' ]

" tmuxline
let g:tmuxline_preset = {
      \'a'    : '#S',
      \'win'  : ['#I', '#W'],
      \'cwin' : ['#I', '#W'],
      \'y'    : ['%R', '%a', '%Y'],
      \'z'    : '#H',
      \'options' : {'status-justify' : 'left'}}
